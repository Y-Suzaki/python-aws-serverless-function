AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Serverless application for health check.

Parameters:
  TargetApplication:
    Type: String
    Default: testApp
  TargetUrl:
    Type: String
    Default: https://www.google.com
  ArtifactBucket:
    Type: String
    Default: kaonashi-aws-sam-deploy-dev
  SNSTopicArn:
    Type: String
    Default: arn:aws:sns:us-west-2:838023436798:sns-topic-health-check
Resources:
  ServerlessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: python3.7
      Handler: health_check.health_check
      FunctionName: !Sub health-check-${TargetApplication}
      MemorySize: 128
      Timeout: 300
      CodeUri: ./serverless-function.zip
      AutoPublishAlias: release
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TARGET_APPLICATION: !Ref TargetApplication
          TARGET_URL: !Ref TargetUrl
      Events:
        Timer:
          Type: Schedule
          Properties:
            Schedule: rate(30 minutes)
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/health-check-${TargetApplication}
      RetentionInDays: 7
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        -
          PolicyName: lambda_logs_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:*
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${LogGroup}:*
  FailedMetricFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/health-check-${TargetApplication}
      FilterPattern: "[log_level=ERROR, error_code=E0001, timestamp, ...]"
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: !Sub ServiceGroup/${TargetApplication}
          MetricName: HealthCheckError
  SucceededMetricFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn: LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/health-check-${TargetApplication}
      FilterPattern: "[log_level=INFO, error_code=I0002, timestamp, ...]"
      MetricTransformations:
      - MetricValue: 0
        MetricNamespace: !Sub ServiceGroup/${TargetApplication}
        MetricName: HealthCheckError
  CloudWatchAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref SNSTopicArn
      AlarmDescription: !Sub "Health check failed, please check the target application, ${TargetApplication}."
      AlarmName: !Sub HealthCheckError-${TargetApplication}
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: HealthCheckError
      Namespace: !Sub ServiceGroup/${TargetApplication}
      Period: 300
      Statistic: Sum
      Threshold: 1
      TreatMissingData: notBreaching
      Unit: Count